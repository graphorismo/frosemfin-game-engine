@startuml

class App
{ 

}
App --> SomeGameRunner\nBuilderRealisation
App --> GameRunner


abstract class AGameRunner
{
  # grathical_core: AGameCore
  # phisical_core: AGameCore
  # logical_core: AGameCore
  # player_actions_core: AGameCore
  # game_world: GameWorld
}
AGameRunner --> GameWorld
AGameRunner --> AGameCore


abstract class AGameRunnerBuilder
{
  + make_game_runner(): GameRunner
  
  + {abstract} set_graphical_core(): void
  + {abstract} set_phisical_core(): void
  + {abstract} set_logical_core(): void
  + {abstract} set_player_actions_core(): void
}
AGameRunnerBuilder -> GameRunner
AGameRunnerBuilder --|> AGameRunner 


class SomeGameRunner\nBuilderRealisation
SomeGameRunner\nBuilderRealisation -|> AGameRunnerBuilder
SomeGameRunner\nBuilderRealisation -----> SomeGraphical\nCoreRealisation
SomeGameRunner\nBuilderRealisation -----> SomePhisical\nCoreRealisation
SomeGameRunner\nBuilderRealisation -----> SomeLogical\nCoreRealisation
SomeGameRunner\nBuilderRealisation -----> SomePlayerActions\nCoreRealisation


class GameRunner
{
  # exit_flag: bool = false

  + process_a_single_tick(): void
  + check_exit_flag(): boolean
  + load_game_world_from_file(file_path: String): void
  + save_game_world_to_file(file_path: String): void
}
GameRunner --|> AGameRunner

class GameWorld
{
  # entites: GameEnitty
  # previous_tick_events: Collection<GameEvent>
  # current_tick_events: Collection<GameEvent>

  + spawn_blank_entity()
  + spawn_entity_cloned_from(entity: GameEntity): void
  + remove_entity(entity: GameEntity): void
  + get_previous_tick_events(): Collection<GameEvent>
  + add_to_current_tick_events(event: GameEvent): void
  + add_to_current_tick_events(events: Collection<GameEvent>): void
}
GameWorld --> GameEvent
GameWorld --> GameEntity


abstract class AGameCore
{
  + set_game_world_ref_to_handle(world: GameWorld)

  + {abstract} produce_own_current_tick_events(): void
  + {abstract} produce_new_entites_into_world(): void
  + {abstract} change_existing_entites_in_world(): void
  + {abstract} add_unhandled_own_events_into_world(): void
  + {abstract} clear_data()
}
AGameCore <|-- SomeGraphical\nCoreRealisation
AGameCore <|-- SomePhisical\nCoreRealisation
AGameCore <|-- SomeLogical\nCoreRealisation
AGameCore <|-- SomePlayerActions\nCoreRealisation


class GameEvent
{	
  # name: final string
  # correspond_entities: Collection<GameEntity>
  # correspond_values: Collection<float>
  
  + GameEvent(name: string)
  
  + get_name(): string
  + get_correspond_entities(): Collection<GameEntity>
  + get_correspond_values(): Collection<float>
  
  + add_correspond_entitie(value: GameEntity)
  + add_correspond_values(value: float)
}
GameEvent -> GameEntity


class GameEntity
{
  # position: Vector2i
  # max_hp : int
  # current_hp : int
  # damage : int
  # max_moves_count : int
  # current_moves_count : int
  # max_shoots_count : int
  # current_shoots_count : int
  
  + get_position() : Vector2i
  + get_max_hp() : int
  + get_current_hp() : int
  + get_damage() : int
  + get_max_moves_count() : int
  + get_current_moves_count() : int
  + get_max_shoots_count() : int
  + get_current_shoots_count() : int
  
  + set_position(value: Vector2i): void
  + set_max_hp(value : int) : void
  + set_current_hp(value : int) : void
  + set_damage(value : int) : void
  + set_max_moves_count(value : int) : void
  + set_current_moves_count(value : int) : void
  + set_max_shoots_count(value : int) : void
  + set_current_shoots_count(value : int) : void
}
GameEntity o--> Vector2i


class SomeGraphical\nCoreRealisation
SomeGraphical\nCoreRealisation -[hidden] SomePhisical\nCoreRealisation

class SomePhisical\nCoreRealisation
SomePhisical\nCoreRealisation -[hidden] SomeLogical\nCoreRealisation

class SomeLogical\nCoreRealisation
SomeLogical\nCoreRealisation -[hidden] SomePlayerActions\nCoreRealisation

class SomePlayerActions\nCoreRealisation


class Vector2i
{
  # x: int
  # y: int
	
  + get_x() : int
  + get_y() : int
	
  + set_x(value : int) : void
  + set_y(value : int) : void
}


note top of SomeGameRunner\nBuilderRealisation
  Some builder realisation which know
  about all nessesary cores' realisations
end note


note right of SomePlayerActions\nCoreRealisation
  Some core realisations incapsulating
  logic corresponding to cores' names
end note


@enduml Pla
